import os
import tempfile
from io import BytesIO
from PIL import Image as PILImage
from agno.agent import Agent
from agno.models.google import Gemini
import streamlit as st
from agno.tools.duckduckgo import DuckDuckGoTools
from agno.media import Image as AgnoImage

# Load API key from environment
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")

# Sidebar configuration and info
with st.sidebar:
    st.title("‚ÑπÔ∏è Configuration")
    if not GOOGLE_API_KEY:
        st.error(
            "Google API key not found. Please set the `GOOGLE_API_KEY` environment variable."
        )
        st.stop()

    st.success("API Key is configured via environment variable")
    st.info(
        "This tool provides AI-powered analysis of medical imaging data using "
        "advanced computer vision and radiological expertise."
    )
    st.warning(
        "‚ö†DISCLAIMER: This tool is for educational and informational purposes only. "
        "All analyses should be reviewed by qualified healthcare professionals. "
        "Do not make medical decisions based solely on this analysis."
    )

# Cache the agent to avoid re-initialization on every run
@st.cache_resource
def get_medical_agent(api_key: str) -> Agent:
    model = Gemini(id="gemini-2.0-flash", api_key=api_key)
    return Agent(
        model=model,
        tools=[DuckDuckGoTools()],
        markdown=True
    )

medical_agent = get_medical_agent(GOOGLE_API_KEY)

# Pre-defined analysis prompt
QUERY = (
    "You are a highly skilled medical imaging expert with extensive knowledge in radiology "
    "and diagnostic imaging. Analyze the patient's medical image and structure your response as follows:\n\n"
    "### 1. Image Type & Region\n"
    "- Specify imaging modality (X-ray/MRI/CT/Ultrasound/etc.)\n"
    "- Identify the patient's anatomical region and positioning\n"
    "- Comment on image quality and technical adequacy\n\n"
    "### 2. Key Findings\n"
    "- List primary observations systematically\n"
    "- Note any abnormalities in the patient's imaging with precise descriptions\n"
    "- Include measurements and densities where relevant\n"
    "- Describe location, size, shape, and characteristics\n"
    "- Rate severity: Normal/Mild/Moderate/Severe\n\n"
    "### 3. Diagnostic Assessment\n"
    "- Provide primary diagnosis with confidence level\n"
    "- List differential diagnoses in order of likelihood\n"
    "- Support each diagnosis with observed evidence from the patient's imaging\n"
    "- Note any critical or urgent findings\n\n"
    "### 4. Patient-Friendly Explanation\n"
    "- Explain the findings in simple, clear language that the patient can understand\n"
    "- Avoid medical jargon or provide clear definitions\n"
    "- Include visual analogies if helpful\n"
    "- Address common patient concerns related to these findings\n\n"
    "### 5. Research Context\n"
    "IMPORTANT: Use the DuckDuckGo search tool to:\n"
    "- Find recent medical literature about similar cases\n"
    "- Search for standard treatment protocols\n"
    "- Provide a list of relevant medical links\n"
    "- Research any relevant technological advances\n"
    "- Include 2-3 key references to support your analysis\n\n"
    "Format your response using clear markdown headers and bullet points. Be concise yet thorough."
)

st.title("üè• Medical Imaging Diagnosis Agent")
st.write("Upload a medical image for professional analysis")

uploaded_file = st.file_uploader(
    "Upload Medical Image",
    type=["jpg", "jpeg", "png", "dicom"],
    help="Supported formats: JPG, JPEG, PNG, DICOM"
)

if not uploaded_file:
    st.info("üëÜ Please upload a medical image to begin analysis")
    st.stop()

# Display the uploaded image
image = PILImage.open(uploaded_file)
width, height = image.size
new_width = 500
new_height = int(new_width * height / width)
image.thumbnail((new_width, new_height), PILImage.LANCZOS)
st.image(image, caption="Uploaded Medical Image", use_container_width=True)

if st.button("üîç Analyze Image", use_container_width=True):
    with st.spinner("üîÑ Analyzing image... Please wait."):
        try:
            # Save to a temporary file
            with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmp:
                image.save(tmp.name)
                agno_image = AgnoImage(filepath=tmp.name)

            response = medical_agent.run(QUERY, images=[agno_image])
            st.markdown("### üìã Analysis Results")
            st.markdown("---")
            st.markdown(response.content)
            st.markdown("---")
            st.caption(
                "Note: This analysis is generated by AI and should be reviewed by "
                "a qualified healthcare professional."
            )
        except Exception as e:
            st.error(f"Analysis error: {e}")
